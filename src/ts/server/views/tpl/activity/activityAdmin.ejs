<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>dashboard</title>
    <link rel="stylesheet" type="text/css" href="/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="/style.css">
    <style>
        body {
            font-family: Menlo, Consolas, monospace;
            color: #444;
        }

        .item {
            cursor: pointer;
        }

        .bold {
            font-weight: bold;
        }

        ul {
            padding-left: 1em;
            line-height: 1.5em;
            list-style-type: dot;
        }

        * {
            padding: 0;
            margin: 0;
        }

        .Section {
            border: 1px solid #ccc;
        }

        li {
            list-style: none;
        }

        ul:after {
            display: block;
            clear: both;
            visibility: hidden;
            height: 0;
            overflow: hidden;
            content: ".";
        }

        ul {
            zoom: 1;
        }

        nav > ul > li {
            float: left;
            width: 80px;
            height: 40px;
            border: 1px solid #ccc;
            text-align: center;
            margin: 20px 5px;
            position: relative;
            cursor: pointer;
        }

        nav > ul > li > ul {
            position: absolute;
            display: none;
            top: 20px;
            left: 0px;
        }

        nav > ul > li:hover > ul {
            display: block;
        }

        nav > ul > li > ul > li {
            width: 160px;
            height: 30px;
            border: 1px solid #ccc;
            text-align: left;
            position: relative;
            margin-bottom: -1px;
            margin-left: -1px;
            cursor: pointer;
        }

        nav > ul li:hover {
            background-color: #bbb;
        }
    </style>
</head>
<body style="display:inline;">
<!-- template for the modal component -->
<script type="x/template" id="modal-template">
    <div class="modal-mask" v-show="show" transition="modal">
        <div class="modal-wrapper">
            <div class="modal-container">

                <div class="modal-header">
                    <slot name="header">
                        default header
                    </slot>
                </div>

                <div class="modal-body">
                    <slot name="body">
                        default body
                    </slot>
                </div>

                <div class="modal-footer">
                    <slot name="footer">
                        default footer
                        <button class="modal-default-button"
                                @click="show = false">
                            OK
                        </button>
                    </slot>
                </div>
            </div>
        </div>
    </div>
</script>
<script type="text/x-template" id="item-template">
    <li>
        <div
                :class="{bold: isFolder}"
                @click="toggle"
                @dblclick="changeType">
            {{model.name}}
            <span v-if="isFolder">[{{open ? '-' : '+'}}]</span>
        </div>
        <ul v-show="open" v-if="isFolder">
            <item
                    class="item"
                    v-for="model in model.children"
                    :model="model">
            </item>
        </ul>
    </li>
</script>
<div id="app" style="width: 800px">
    <button id="show-modal" @click="showModal = true">Show Modal</button>
    <!-- use the modal component, pass in the prop -->
    <modal :show.sync="showModal">
        <!--
          you can use custom content here to overwrite
          default content
        -->
        <h3 slot="header">custom header</h3>
    </modal>


    <input id="btnGen" type="button" value="分区" @click="onGen">
    <input id="btnGen" type="button" value="确定生成赛程" @click="onGenActivity">
    <item
            class="item"
            :model="sectionArr">
    </item>
    <div>
        <li v-for="section in sectionArr">
            <div class="Section">
                {{section.name}}
                <nav>
                    <ul>
                        <li v-for="team in section.teamArr">
                            {{ team.name }}
                            <ul>
                                <li v-for="playerInfo in team.playerInfoArr">
                                    <img src='{{playerInfo.avatar()}}' style="width: 40px">
                                    {{ playerInfo.name() }}:{{ playerInfo.eloScore() }}
                                </li>
                            </ul>
                        </li>
                    </ul>
                </nav>
                <ul>
                    <li v-for="game in section.gameArr">
                        <div v-if="section.idx">
                            {{game[0].name}} vs {{game[1].name}}
                            <input type="radio" name="game{{section.idx}}" value="{{$index+10*section.idx}}"
                                   v-model="gameIdHigh" @click="onGameChanged">
                        </div>
                        <div v-else="section.idx">
                            {{game[0].name}} vs {{game[1].name}}
                            <input type="radio" name="game{{section.idx}}" value="{{$index+10*section.idx}}"
                                   v-model="gameIdLow" @click="onGameChanged">
                        </div>
                    </li>
                </ul>
                <br>
                <br>
                <br>
                <br>
            </div>
        </li>
    </div>
    <input type="button" value="打印game球员" @click="onPrint">
</div>
<div style="position: absolute;left: 450px;top: 0">
    <canvas id="the-canvas"></canvas>
</div>

<script src="/js/jquery-2.1.4.min.js"></script>
<script src="/js/createjs/createjs.min.js"></script>
<script src="/js/createjs/easeljs.min.js"></script>
<script src="/js/createjs/tweenjs.min.js"></script>
<script src="/js/vue.min.js"></script>
<script src="/js/vue-resource.min.js"></script>
<script src="/js/client.js"></script>
<script src="/js/pdf.js"></script>
<script>
    var activityId = parseInt('<%= activityId %>');
    var pdfData64;
    var stage;
    function genPrint(playerDataArr, py, py2) {
        if (!stage) {
            var canvas = document.getElementById('the-canvas');
            stage = new createjs.Stage(canvas);
            pdfData64 = stage.toDataURL('rgba(0,0,0,0)', "image/png")
        }
        console.log("genPrint");
        stage.removeAllChildren();
        var sheet = new createjs.Bitmap(pdfData64);
        stage.addChild(sheet);
        var map = {}
        map[1] = "风"
        map[2] = "林"
        map[3] = "火"
        map[4] = "山"
        function addName(start, posY) {
            for (var i = start; i < start + 4; i++) {
                var player = playerDataArr[i];
                var label = new createjs.Text(player.name, "40px Arial", "#000");
                label.x = 220;
                label.y = posY + i * 95
                stage.addChild(label)
                var style = new createjs.Text("/" + map[player.style], "38px Arial", "#000");
                style.x = 570;
                style.y = posY + i * 95
                stage.addChild(style)
            }
        }

        addName(0, py)
        addName(4, py2)
        stage.update();
    }
    Array.prototype.swap = function (x, y) {
        var b = this[x];
        this[x] = this[y];
        this[y] = b;
        return this;
    }

    // define the item component
    Vue.component('item', {
        template: '#item-template',
        props: {
            model: Object
        },
        data: function () {
            return {
                open: false
            }
        },
        computed: {
            isFolder: function () {
                return this.model.children &&
                        this.model.children.length
            }
        },
        methods: {
            toggle: function () {
                if (this.isFolder) {
                    this.open = !this.open
                }
            },
            changeType: function () {
                if (!this.isFolder) {
                    Vue.set(this.model, 'children', [])
                    this.addChild()
                    this.open = true
                }
            }
        }
    })
    // register modal component
    Vue.component('modal', {
        template: '#modal-template',
        props: {
            show: {
                type: Boolean,
                required: true,
                twoWay: true
            }
        }
    })
    var vue = new Vue({
        el: '#app',
        data: {
            showModal: false,
            lowSectionC: [],
            highSectionC: [],
            sectionArr: [],
            gameIdHigh: 0,
            gameIdLow: 0
        },
        methods: {
            combineTeam: function (arr, num) {
                var r = [];
                (function f(t, a, n) {
                    if (n == 0) {
                        return r.push(t);
                    }
                    for (var i = 0, l = a.length; i <= l - n; i++) {
                        f(t.concat(a[i]), a.slice(i + 1), n - 1);
                    }
                })([], arr, num);
                return r;
            },

            onGenActivity: function (e) {
                if (this.sectionArr && this.sectionArr.length) {
                    var activityData = {activityId: activityId, date: ""};
                    activityData.gameDataArr = []//[{gameId,[playerId]}]
                    for (var idx = 0; idx < this.sectionArr.length; idx++) {
                        var section = this.sectionArr[idx];
                        var gameData = {id: 0, playerIdArr: []}
                        for (var i = 0; i < section.gameArr.length; i++) {
                            var teamInfoArr = section.gameArr[i];
                            for (var j = 0; j < teamInfoArr.length; j++) {
                                var teamInfo = teamInfoArr[j];
                                for (var k = 0; k < teamInfo.playerInfoArr.length; k++) {
                                    var playerInfo = teamInfo.playerInfoArr[k];
                                    console.log("playerInfo", JSON.stringify(playerInfo));
                                    gameData.playerIdArr.push(playerInfo.id());
                                }
                            }
                        }
                        activityData.gameDataArr.push(gameData);
                    }
                    console.log('onGenActivity data', activityData);

                    this.$http.post("/admin/game/genActivity", {activityData: activityData}).then(function (res) {
                        console.log('onGenActivity', res.data);
                    });
                }
                else {
                    alert('没有设置赛程！！！');
                }
                console.log('onGenActivity', JSON.stringify(this.sectionArr));
            },
            onGameChanged: function (e) {
                console.log(e, e.target);
                var gameId = e.target.value;
                var sectionIdx = 0;
                if (gameId > 9)//low section
                {
                    sectionIdx = 1;
                    gameId -= 10;
                }
                var game = this.sectionArr[sectionIdx].gameArr[gameId]

                var team1 = game[0]
                var playerArr = team1.getNewPlayerDataArr()
                var playerDataArr = [];
                for (var i = 0; i < playerArr.length; i++) {
                    var player = playerArr[i];
                    playerDataArr.push(player);
                }

                playerArr = game[1].getNewPlayerDataArr()
                for (var i = 0; i < playerArr.length; i++) {
                    var player = playerArr[i];
                    playerDataArr.push(player);
                }
                genPrint(playerDataArr, 515, 555);
                console.log('onGameChanged', e.target.value, game);
            },
            onPrint: function () {
                this.$http.post("/admin/game/genPrintPng", {base64: stage.toDataURL('rgba(0,0,0,0)', "image/png")}).then(function (res) {
                    console.log('todo print!!!', res.data);
                });
            },
            onGenGames: function (e) {
            },
            onGen: function () {
                this.$http.post("/admin/activity/getActPlayer", {id: activityId}).then(function (res) {
                    var playerDataArr = res.data;
//                    console.log(res);
                    function getSection(playerDataArr, start) {
                        var playerData;
                        var section = [];
                        var teamInfo = new TeamInfo();
                        teamInfo.name = "team" + (section.length + 1);

                        //low section
                        for (var i = start; i < start + 16; i++) {
                            playerData = playerDataArr[i];
                            if (teamInfo.length() == 4) {
                                section.push(teamInfo);
                                teamInfo = new TeamInfo();
                                teamInfo.name = "team" + (section.length + 1);
                            }
                            teamInfo.push(new PlayerInfo(playerData));
//                            console.log(playerData.name, 'elo score:', playerData.eloScore);
                        }
                        section.push(teamInfo);
                        return section;
                    }

                    var lowSection = getSection(playerDataArr, 0);
                    var highSection = getSection(playerDataArr, 16);
                    this.sectionArr = [{idx: 0, name: '上半区：', teamArr: highSection, btnId: 'onGenHigh', gameArr: []},
                        {idx: 1, name: '下半区：', teamArr: lowSection, btnId: 'onGenLow', gameArr: []}]

                    //gen combine
                    var gameArr = this.combineTeam(this.sectionArr[0].teamArr, 2);
                    gameArr.swap(1, 5);
                    this.sectionArr[0].gameArr = gameArr;
                    gameArr = this.combineTeam(this.sectionArr[1].teamArr, 2);
                    gameArr.swap(1, 5);
                    this.sectionArr[1].gameArr = gameArr;
                });
            }
        }
    });


    PDFJS.getDocument('/img/gameSheet.pdf').then(function (pdf) {
        // Fetch the page.
        pdf.getPage(1).then(function (page) {
            var scale;
            scale = 1.48;
            scale = 2;
            var viewport = page.getViewport(scale);
            var canvas = document.getElementById('the-canvas');
            var context = canvas.getContext('2d');
            //A4 794×1123
            canvas.width = viewport.width;
            canvas.height = viewport.height;
            // Render PDF page into canvas context.
            var renderContext = {
                canvasContext: context,
                viewport: viewport
            };
            //render take some sec
            page.render(renderContext);
        });

    });
</script>
</body>
</html>

