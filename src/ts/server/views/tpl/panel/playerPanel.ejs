<style>
    .inputPanel {
        width: 100%;
        left: 60px;
        top: 200px;
        position: absolute;
        display: none;
        z-index: 99;
    }

    #playerName {
        display: inline-block;
        font-size: 30px;
        font-family: 'Microsoft Yahei';
    }

    #playerNameShadow {
        display: inline-block;
        font-size: 30px;
        font-family: 'Microsoft Yahei';
    }

    .nameBlue {
        display: inline-block;
        font-size: 30px;
        font-family: 'Microsoft Yahei';
        background: -webkit-gradient(linear, 0% 20%, 0% 100%, from(#ddecff), to(#5f7aef));
        color: transparent;
        -webkit-text-fill-color: transparent;
        -webkit-background-clip: text;
        position: absolute;
        z-index: 10;
    }

    .nameShadowBlue {
        display: inline-block;
        font-size: 30px;
        font-family: 'Microsoft Yahei';

        text-shadow: 0 0 0.08em #003f8e,
        -0 -0 0.08em #003f8e;
        position: absolute;
        z-index: 9;
    }

    .nameRed {
        display: inline-block;
        font-size: 30px;
        font-family: 'Microsoft Yahei';
        background: -webkit-gradient(linear, 0% 20%, 0% 100%, from(#ffe5ec), to(#ff88aa));
        color: transparent;
        -webkit-text-fill-color: transparent;
        -webkit-background-clip: text;
        position: absolute;
        z-index: 10;
    }

    .nameShadowRed {
        display: inline-block;
        font-size: 30px;
        font-family: 'Microsoft Yahei';

        text-shadow: 0 0 0.08em #681d19,
        -0 -0 0.08em #003f8e;
        position: absolute;
        z-index: 9;
    }

</style>
<div id="panel">
    <label id="playerNameShadow" v-bind:class="[isRed ? 'nameShadowRed' : 'nameShadowBlue']" style="left:{{nameX}}px;top:{{nameY}}px">{{pickedName}}</label>
    <label id="playerName" v-bind:class="[isRed ? 'nameRed' : 'nameBlue']" style="left:{{nameX}}px;top:{{nameY}}px">{{pickedName}}</label>
    <div class="inputPanel">
        <div class="playerPanel">
            <img class="playerAvatar" src="{{pickedImg}}" style="width: 180px">
            <br>
            player id:
            <div class="pickupPlayer">
                <ul v-for="player in playerInfoArr">
                    <input id="playerId{{$index}}" name="posSel" type="radio" value="{{$index}}" v-model="picked"
                           @change="onPicked"/>
                    <label for="{{$index}}">{{player.name}}</label>
                </ul>
                <input id="btnFadeIn" class="btnUpdate" type="button" value="fadeIn" @click="onClkFadeIn"/>
                <br>
                <input id="btnFadeOut" class="btnFadeOut" type="button" value="fadeOut" @click="onClkFadeOut"/>
                鼠标移动到头像上:按 M 切换移动状态
                <br>
                <label id="moveState"></label>
            </div>
        </div>
    </div>
</div>
<div class="Preloader" style="display: none">
    <img src="/img/panel/playerPanelBlue.png">
    <img src="/img/panel/playerPanelRed.png">
</div>
<script src="/js/vue.min.js"></script>
<script>
    var onServer = function () {
        cmd.on(CommandId.initPanel, function (param) {
            console.log("initPanel::::::::", param);
            vue.playerInfoArr = param.playerInfoArr;
            if (param.playerInfo) {
                fadeInPlayerPanel(new PlayerInfo(param.playerInfo));
            }
            moveCtn(param.position.ctnX, param.position.ctnY);
        })
        cmd.on(CommandId.fadeInPlayerPanel, function (param) {
            var playerInfo = new PlayerInfo(param);
            console.log("PlayerInfo:", playerInfo);
            fadeInPlayerPanel(playerInfo);
        })
        cmd.on(CommandId.fadeOutPlayerPanel, function () {
            fadeOutPlayerPanel();
        });
        cmd.on(CommandId.movePlayerPanel, function (param) {
            moveCtn(param.ctnX, param.ctnY);
        });
    }
</script>
<script>
    var onKeyPress = function () {
        document.onkeydown = function (e) {
            var key = e.keyCode;
            var isCtrl = e.ctrlKey;
            var isShift = e.shiftKey;
            var isAlt = e.altKey;
            console.log("key:", key);
//            var isMoving = false;
            var ctn = client.panel.ctn;

            var ofs = 1;
            if (isShift)
                ofs = 10;
            var cx = ctn.x;
            var cy = ctn.y;
            if (key == 38)//up
            {
                cy = ctn.y - ofs;
            }
            else if (key == 40)//down
            {
                cy = ctn.y + ofs;
            }
            else if (key == 37)//left
            {
                cx = ctn.x - ofs;
            }
            else if (key == 39)//right
            {
                cx = ctn.x + ofs;
            }
            else if (key == 77)//key m :
            {
//                toggleMoving();
                isMoving = !isMoving;
            }
            if (isMoving) {
                cmd.proxy(CommandId.cs_movePlayerPanel,
                        {
                            ctnX: cx,
                            ctnY: cy
                        });
            }
            else {
                mouseOfsX = -1;
                mouseOfsY = -1;
            }

        };
    }
    document.onmouseup = function () {
        isMoving = false;
    }
    var mouseOfsX = -1;
    var mouseOfsY = -1;
    var onMouseMove = function onMouseMove(e) {
        if (isMoving) {
            if (mouseOfsX < 0) {
                mouseOfsX = e.clientX - client.panel.ctn.x;
                mouseOfsY = e.clientY - client.panel.ctn.y;
            }
            else {
                cmd.proxy(CommandId.cs_movePlayerPanel,
                        {
                            ctnX: e.clientX - mouseOfsX,
                            ctnY: e.clientY - mouseOfsY
                        });
            }
        }
    }
    document.onmousemove = onMouseMove;

</script>
<script>
    var isMoving = false;
    var movingTimer = 0;
    $(function () {
        onKeyPress();
        onServer();
    });

    var movePlayerName = function (x, y) {
        console.log("movePlayerName");
        x += 290;
        y += 18;
        vue.nameX = x;
        vue.nameY = y;
    }
    var moveCtn = function (x, y) {
        var ctn = client.panel.ctn;
        ctn.x = x;
        ctn.y = y;
        movePlayerName(x, y);
    }

    function getMousePos(event) {
        var e = event || window.event;
        return {'x': e.clientX, 'y': clientY}
    }

    var toggleMoving = function () {
        if (movingTimer)
            clearInterval(movingTimer)
        else {
            setInterval(function () {
                console.log("mouse xy:", window.event.clientX, window.event.clientY);
            }, 10);
        }
    }


    var fadeInPlayerPanel = function (playerInfo) {
        console.log("fadeInPlayerPanel");
        var ctn = client.panel.ctn;
        ctn.alpha = 1;
//        if (ctn.numChildren)
        ctn.removeAllChildren();
        var fxCtn = new createjs.Container()
        ctn.addChild(fxCtn);


        var bgPath = '/img/panel/playerPanel';

        if (playerInfo.isRed)
            bgPath += 'Red.png';
        else
            bgPath += 'Blue.png';

        var bg = new createjs.Bitmap(bgPath);
        fxCtn.addChild(bg);

        var avatarCtn = new createjs.Container();
        avatarCtn.x = 149;
        avatarCtn.y = 65;
        var mask = new createjs.Shape();
        var sx = 63;
        mask.graphics.beginFill("#000000")
                .moveTo(sx, 0)
                .lineTo(0, 105)
                .lineTo(250 - sx, 105)
                .lineTo(250, 0)
                .lineTo(sx, 0);
        avatarCtn.addChild(mask);
        fxCtn.addChildAt(avatarCtn, 0);

        var img = new Image()
        img.onload = function () {
            var avatar = new createjs.Bitmap(playerInfo.avatar());
            var bound = avatar.getBounds();
            avatar.scaleX = avatar.scaleY = 105 / bound.height;
            avatar.x = -bound.width * .5 * avatar.scaleX;
            avatar.y = -bound.height * .5 * avatar.scaleX;
            mask.x = avatar.x;
            mask.y = avatar.y;
            avatar.mask = mask;
            avatarCtn.addChild(avatar);
            var bgBound = bg.getBounds();
            fxCtn.cache(0, 0, bgBound.width, bgBound.height);
        }
        img.src = playerInfo.avatar();

        var eloScore = new createjs.Text(playerInfo.eloScore(), '30px Microsoft Yahei', '#f2f2f2')
        eloScore.textAlign = 'left';
        eloScore.x = 285;
        eloScore.y = 65;
        fxCtn.addChild(eloScore);
        vue.isRed = playerInfo.isRed;
        movePlayerName(ctn.x, ctn.y);
        vue.pickedName = playerInfo.name();
    }

    var fadeOutPlayerPanel = function () {
        var ctn = client.panel.ctn;
        createjs.Tween.get(ctn).to({alpha: 0}, 100);
        vue.pickedName = '';
    }
    var vue = new Vue({
        el: '#panel',
        data: {
            isRed: true,
            picked: 0,
            nameX: 0,
            nameY: 0,
            pickedName: "",
            pickedImg: "/img/player/red.png",
            playerInfoArr: []
        },
        methods: {
            onClkFadeOut: function () {
                cmd.proxy(CommandId.cs_fadeOutPlayerPanel);
            },
            onClkFadeIn: function () {
                var playerId = this.playerInfoArr[this.picked].id;
                cmd.proxy(CommandId.cs_fadeInPlayerPanel, playerId);
            },
            onPicked: function () {
                console.log('pick pos: ', this.picked);
                this.pickedImg = this.playerInfoArr[this.picked].avatar;
//                this.pickedName = this.playerInfoArr[this.picked].name;
            }
        }
    })
</script>
